/////////////////////////////////////////////////////////////////////////////
// Semester:         CS367 Spring 2017
// PROJECT:          p3
// FILE:             Reducer.java
//
// Author1: Aseel Albeshri, albeshri@wisc.edu, albeshri, lecture 002
// Author2: Jessica Fernandes, jfernandes2@wisc.edu, jfernandes2, lecture 002
//
/////////////////////////////////////////////////////////////////////////////
import java.io.*;
import java.util.*;
import java.lang.*;

/**
 * Reducer solves the following problem: given a set of sorted input files (each
 * containing the same type of data), merge them into one sorted file. 
 *
 */
public class Reducer {
    // list of files for stocking the PQ
    private List<FileIterator> fileList;
    private String type,dirName,outFile;

    public static void main(String[] args) {
		if (args.length != 3) {
			System.out.println("Usage: java Reducer <weather|thesaurus> <dir_name> <output_file>");
			System.exit(1);
		}

		String type = args[0];
		String dirName = args[1];
		String outFile = args[2];

		Reducer r = new Reducer(type, dirName, outFile);
		r.run();
	
    }

	/**
	 * Constructs a new instance of Reducer with the given type (a string indicating which type of data is being merged),
	 * the directory which contains the files to be merged, and the name of the output file.
	 */
    public Reducer(String type, String dirName, String outFile) {
		this.type = type;
		this.dirName = dirName;
		this.outFile = outFile;
    }

	/**
	 * Carries out the file merging algorithm described in the assignment description. 
	 */
    public void run() {
		File dir = new File(dirName);
		File[] files = dir.listFiles();
		Arrays.sort(files);
		PrintWriter writer = null;
		
		try {
			writer = new PrintWriter(this.outFile);
		} catch (FileNotFoundException e2) {
			// TODO Auto-generated catch block
			e2.printStackTrace();
			System.exit(1);
		}

		Record r = null;

		// list of files for stocking the PQ
		fileList = new ArrayList<FileIterator>();

		for(int i = 0; i < files.length; i++) {
			File f = files[i];
			if(f.isFile() && f.getName().endsWith(".txt")) {
				fileList.add(new FileIterator(f.getAbsolutePath(), i));
			}
		}

		switch (type) {
		case "weather":
			r = new WeatherRecord(fileList.size());
			break;
		case "thesaurus":
			r = new ThesaurusRecord(fileList.size());
			break;
		default:
			System.out.println("Invalid type of data! " + type);
			System.exit(1);
		}
		
		Comparator cmp = r.getComparator();
		FileLinePriorityQueue fq=new FileLinePriorityQueue(fileList.size(), cmp);
		FileLine fl = null;
		FileLine old = null;
		FileIterator fi;

		// TODO
		// Initial read of all files
		for (int i = 0; i < fileList.size(); i++) {

			fi = fileList.get(i);

			if (fi.hasNext()) {
				fl = fi.next();
				try {
					fq.insert(fl);
				} catch (PriorityQueueFullException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
					System.exit(1);
				}
			}
		}

		try {
			fl = fq.removeMin();
		} catch (PriorityQueueEmptyException e1) {
			// TODO Auto-generated catch block
			// ignore this is ok
			return;
		}
		
		old = fl;
		
		
//		String word = fl.getWord();
		
		// now start merging
		try {
			while (true){
				if(cmp.compare(fl,old)!=0){
					// write to output file here
					writer.println(r.toString());
					r.clear();
					old = fl;
				}
				//merge
				r.join(fl);

				fi = fl.getFileIterator();
				if (fi.hasNext()) {
					fl = fi.next();
					try {
						fq.insert(fl);
					} catch (PriorityQueueFullException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
						System.exit(1);
					}
				}
				fl = fq.removeMin();

			}
		} catch (PriorityQueueEmptyException e) {
			//Ignore
		}
		
		writer.println(r.toString());
		writer.close();
    }
}
