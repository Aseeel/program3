/////////////////////////////////////////////////////////////////////////////
// Semester:         CS367 Spring 2017
// PROJECT:          p3
// FILE:             WeatherRecord.java
//
// Author1: Aseel Albeshri, albeshri@wisc.edu, albeshri, lecture 002
// Author2: Jessica Fernandes, jfernandes2@wisc.edu, jfernandes2, lecture 002
//
/////////////////////////////////////////////////////////////////////////////
import java.util.Comparator;
import java.util.ArrayList;

/**
 * The WeatherRecord class is the child class of Record to be used when merging weather data. Station and Date
 * store the station and date associated with each weather reading that this object stores.
 * l stores the weather readings, in the same order as the files from which they came are indexed.
 */
public class WeatherRecord extends Record {

	int stationID;
	int date;
	ArrayList<Double> data = new ArrayList<Double>();

	/**
	 * Constructs a new WeatherRecord by passing the parameter to the parent constructor
	 * and then calling the clear method()
	 */
	public WeatherRecord(int numFiles) {
		super(numFiles);
		clear();
	}


	/**
	 * This comparator should first compare the stations associated with the given FileLines. If 
	 * they are the same, then the dates should be compared. 
	 */
	private class WeatherLineComparator implements Comparator<FileLine> {
		public int compare(FileLine l1, FileLine l2) {
			if(l1==null) return 1;
			if(l2==null) return -1;
			
			String wdata1[] = l1.getString().split(",");
			String wdata2[] = l2.getString().split(",");
			if (Integer.parseInt(wdata1[0]) == Integer.parseInt(wdata2[0])) {
				return Integer.parseInt(wdata1[1]) - Integer.parseInt(wdata2[1]);
			}
			return Integer.parseInt(wdata1[0]) - Integer.parseInt(wdata2[0]);

	
		}

		public boolean equals(Object o) {
			return this.equals(o);
		}
	}

	/**
	 * This method should simply create and return a new instance of the WeatherLineComparator
	 * class.
	 */
	public Comparator<FileLine> getComparator() {
		return new WeatherLineComparator();
	}

	/**
	 * This method should fill each entry in the data structure containing
	 * the readings with Double.MIN_VALUE
	 */
	public void clear() {

		data = new ArrayList<Double>();

		for (int i = 0; i < getNumFiles(); i++) {
			data.add(Double.MIN_VALUE);
		}

	}

	/**
	 * This method should parse the String associated with the given FileLine to get the station, date, and reading
	 * contained therein. Then, in the data structure holding each reading, the entry with index equal to the parameter 
	 * FileLine's index should be set to the value of the reading. Also, so that
	 * this method will handle merging when this WeatherRecord is empty, the station and date associated with this
	 * WeatherRecord should be set to the station and date values which were similarly parsed.
	 */
	public void join(FileLine li) {
	
		String wdata[] = li.getString().split(",");

		this.stationID = Integer.parseInt(wdata[0]);
		this.date = Integer.parseInt(wdata[1]);

		data.set(li.getFileIterator().getIndex(), Double.parseDouble(wdata[2]));

	}
	/**
	 * See the assignment description and example runs for the exact output format.
	 */
	public String toString() {
		String printD = "";
		printD = stationID + "," + date + ",";
		for (int i =0; i < data.size(); i++) {
//			System.out.println(printD + data.get(i));
			if (data.get(i) == Double.MIN_VALUE) {
				printD +="-,";
			}
			else
				printD +=data.get(i) + ",";
		}
		printD = printD.substring(0, printD.length() - 1);
		return printD;
	}
}
